<?php
// view_file.php

// Check if the 'file' parameter is provided in the URL (e.g., view_file.php?file=somefile.php)
if (isset($_GET['file'])) {
  // Vulnerable Path Traversal code
  $file = $_GET['file'];  // Get the 'file' parameter from the URL

  // Remove any instances of "../" to prevent simple directory traversal attempts.
  // However, this only removes one instance of "../", leaving the vulnerability still open.
  $file = str_replace("../", "", $file);

  // Set the base directory where the files are expected to be (relative to this script)
  // In this case, it's the 'vulnerabilities' directory.
  $baseDir = "../vulnerabilities/";

  // Check if the 'vulnerabilities' directory exists
  if (is_dir($baseDir)) {
    // Get a list of files in the 'vulnerabilities' directory
    $files = scandir($baseDir);
    echo "Files in base directory:<br>";

    // Display the files in the 'vulnerabilities' directory for informational purposes
    foreach ($files as $file) {
      echo htmlspecialchars($file) . "<br>";  // Output each file's name, escaping special characters
    }
  } else {
    echo "Directory does not exist.<br>";  // If the directory doesn't exist, show an error
  }

  // Construct the file path by appending the sanitized 'file' parameter to the base directory
  $path = $baseDir . $file;
  echo "Processed file: " . htmlspecialchars($file) . "<br>";  // Display the processed file name
  echo "Resolved path: " . htmlspecialchars($path) . "<br>";  // Show the resolved path

  // Check if the file exists and is a regular file
  if (file_exists($path) && is_file($path)) {
    // Include the file if it exists and is a regular file
    include($path);
  } else {
    // If the file doesn't exist, display an error message
    echo "File not found.";
  }
  exit;  // End the script execution
}
?>
