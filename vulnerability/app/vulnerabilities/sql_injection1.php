<?php
// Database connection details are assumed to be passed from login.php
if (!isset($conn)) {
  die("Database connection is missing.");
}

// Retrieve raw user inputs (no sanitization, vulnerable)
$input_username = isset($_POST['username']) ? $_POST['username'] : ''; // No sanitization, raw data
$input_password = isset($_POST['password']) ? $_POST['password'] : ''; // No sanitization, raw data

// VULNERABILITY: SQL Injection Risk
// This SQL query directly includes user inputs ($input_username and $input_password) without any validation, sanitization, or escaping.
// The lack of input handling makes the application vulnerable to SQL injection attacks, where malicious input can alter the SQL query logic.
// For example:
// - If an attacker sets $input_username to "' OR '1'='1" and $input_password to an empty string, the query will bypass authentication.
// - The resulting query will look like this:
//   SELECT * FROM users WHERE username = '' OR '1'='1' -- ' AND password = '';
//   Here, the 'OR '1'='1' condition always evaluates to TRUE, allowing unauthorized access.
// The use of the '--' sequence comments out the rest of the query (e.g., the password check), making it ineffective.

$sql = "SELECT * FROM users WHERE username = '" . $input_username . "' OR '1'='1' -- ' AND password = '" . $input_password . "';";

$debug_query = $sql;
// Execute the query
$result = $conn->query($sql);


// Note: The query will be vulnerable to SQL injection
// If any user data is found, we will proceed to check the password
?>
