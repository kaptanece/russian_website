<?php

// Ensure the database connection is available
if (!isset($conn)) {
  // Critical: Terminate if the database connection is missing.
  die("Database connection is missing.");
}

// Check if required variables are set
if (!isset($search)) {
  // Prevent execution if 'search' variable is undefined.
  die("Error: Undefined variable 'search'. Ensure it is defined before including this file.");
}
if (!isset($order_by)) {
  // Prevent execution if 'order_by' variable is undefined.
  die("Error: Undefined variable 'order'. Ensure it is defined before including this file.");
}
if (!isset($order_dir)) {
    die("Error: Undefined variable 'search'. Ensure it is defined before including this file.");
}


// Build the base query (intentionally vulnerable)
$query = "SELECT * FROM news WHERE 1=1";

// Add search filter
if (!empty($search)) {
  /*
  VULNERABILITY:
  SQL Injection: The user input ($search) is directly concatenated into the query without sanitization or validation.
  An attacker could inject malicious SQL code to manipulate the database.
  */
  $query .= " AND CONCAT(title, ' ', content) LIKE '%" . $search . "%'";
}

/*// Add category filter
if (!empty($category)) {
  /*
  VULNERABILITY:
  SQL Injection: The user input ($category) is directly concatenated into the query without sanitization.
  An attacker could exploit this to alter the SQL query.
  */
  /*$query .= " AND category = '$category'";*/


// Add ordering
$query .= " ORDER BY $order_by $order_dir";
/*
VULNERABILITY:
SQL Injection: The variables ($order_by, $order_dir) are directly inserted into the query.
This allows attackers to inject malicious SQL code by altering the input values.
*/


// Execute the query (intentionally without prepared statements)
$result = $conn->query($query);
/*
VULNERABILITY:
No Prepared Statements: The use of raw queries without parameterization increases the risk of SQL injection.
Prepared statements should be used to securely handle user inputs.
*/

// Check if the query execution was successful
if (!$result) {
  // Error handling: Output SQL error messages.
  /*
  VULNERABILITY:
  Error Message Exposure: Displaying raw SQL errors can reveal database details to attackers.
  */
  die("SQL Error: " . $conn->error);
}

// Return the result to the caller
return $result;
?>
